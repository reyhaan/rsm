var max_nodes = 100;
var rsm_nodes = {};
var gen_nodes = {};

var calculate = function(fd, fr) {
	var common_nodes = [];

	for(var i = 0; i < fd.length; i++) {
		for(var j = 0; j < fr.length; j++) {
			if(parseInt(fd[i]) == parseInt(fr[j])) {
				common_nodes.push(fd[i]);
			}
		}
	}

	precision = common_nodes.length/fd.length;
	recall = common_nodes.length/fr.length;

	F = 2*((precision*recall)/(precision+recall));

	return result = {
		"precision": precision,
		"recall": recall,
		"F": F
	};
};

var getSimilarArray = function(gen_nodes, rsm_nodes, target_node) {
	var len_gen_nodes = gen_nodes.length;
	var len_rsm_nodes = null;
	var similar_index = 0;
	var similar_array = [];

	// This loop is generating the array containing all the similarity index.
	for(var nodes in rsm_nodes) {
		var target_node_found = false;

		// skip those nodesets array where the target node is not present in the nodesets generated by RSM algorithm.
		for(var i = 0; i < rsm_nodes[nodes].length; i++) {
			if(target_node == parseInt(rsm_nodes[nodes][i])) {
				target_node_found = true;
			}
		}

		if(rsm_nodes.hasOwnProperty(nodes) && target_node_found) {
			len_rsm_nodes = rsm_nodes[nodes].length;
			if(len_gen_nodes > len_rsm_nodes) {

				for(var i = 0; i < gen_nodes.length; i++) {
					for(var j = 0; j < rsm_nodes[nodes].length; j++) {
						if(parseInt(gen_nodes[i]) == parseInt(rsm_nodes[nodes][j])) {
							similar_index++;
						}
					}
				}
				similar_array.push(similar_index/len_gen_nodes)

			} else {

				for(var i = 0; i < rsm_nodes[nodes].length; i++) {
					for(var j = 0; j < gen_nodes.length; j++) {
						if(parseInt(gen_nodes[j]) == parseInt(rsm_nodes[nodes][i])) {
							similar_index++;
						}
					}
				}
				similar_array.push(similar_index/len_rsm_nodes)
			}
		}
		similar_index = 0;
	}

	var comparison_index = similar_array[0];
	var final_index = 0;
	var similar_index_array = [];

	var similar_index_object = {};

	// Loop to generate the similar index object with index as key and the array of similar nodesets array as the value.
	for(var i = 0; i < similar_array.length; i++) {
		if(similar_index_object.hasOwnProperty(similar_array[i])) {
			similar_index_object[similar_array[i]].push(i+1);
		} else {
			similar_index_object[similar_array[i]] = [i+1];
		}
	}

	console.log(similar_index_object);

	// loop over similarity index object and find the greatest index.
	for(var index in similar_index_object) {
		if(parseFloat(comparison_index) < parseFloat(index)) {
			comparison_index = parseFloat(index);
		}
	}

	var shortest_length = 0;

	// This loop is fetching the best nodeset from the equal similar index nodesets array.
	for(var i = 0; i < similar_index_object[comparison_index].length; i++) {
		if((shortest_length < rsm_nodes[similar_index_object[comparison_index][i]].length) && (len_gen_nodes <= rsm_nodes[similar_index_object[comparison_index][i]].length)) {
			shortest_length = similar_index_object[comparison_index][i];
		}
	}
	console.log(similar_array);
	console.log(rsm_nodes);
	return rsm_nodes[shortest_length];

};

// fetch nodesets data for RSM algorithm
$.get("../../communities.txt", function(data) {

	data = data.split("#");
	for(var i = 0; i < data.length; i++) {
		if(data[i] != "\n") {
			rsm_nodes[i+1] = data[i].trim().split("\n");
		}
	}

	// Fetch nodesets for any other algorithm.
	$.get("../directed_networks/community.dat", function(data) {
		data = data.split("\n");
		var arr = [];
		for(var i = 0; i < data.length; i++) {
			data[i] = data[i].trim();
			if(gen_nodes.hasOwnProperty(data[i])) {
				gen_nodes[data[i]].push(i+1);
			} else {
				gen_nodes[data[i]] = [i+1];
			}
		}

		// Select the node for which yoou have to run the calculations.
		var fd = getSimilarArray(gen_nodes['1'], rsm_nodes, 2);
		var fr = gen_nodes['1'];

		console.log(fd);
		console.log(fr);
		console.log(calculate(fd, fr));


	});

});

var precisionArray = [0.671, 0.548, 0.465, 0.358, 0.280, 0.220, 0.110];
var recallArray = [1, 0.970, 0.750, 0.660, 0.500, 0.290, 0.159];
var fscoreArray = [0.803, 0.708, 0.574, 0.464, 0.358, 0.250, 0.128];


// Precision data
var precisionCopra = [0.16, 0.16, 0.16, 0.14, 0.14, 0.12, 0.12];
var precisionCis = [0.1, 0.05, 0.04, 0.03, 0.02, 0.01, 0.01];
var precisionCfinder = [0.4, 0.38, 0.36, 0.35, 0.32, 0.30, 0.28];
var precisionLink = [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1];
var precisionGce = [0.682, 0.184, 0.02, 0.03, 0.05, 0.08, 0.1];

// Recall data
var recallCopra = [0.97, 0.97, 0.93, 0.82, 0.70, 0.68, 0.63];
var recallCis = [0.61, 0.18, 0.10, 0.10, 0.08, 0.10, 0.02];
var recallCfinder = [0.38, 0.35, 0.32, 0.30, 0.26, 0.25, 0.22];
var recallLink = [0.99, 1, 1, 1, 1, 1, 1];
var recallGce = [0.25, 0.02, 0, 0, 0, 0, 0];

// fscore data
var fscoreCopra = [];
var fscoreCis = [];
var fscoreCfinder = [];
var fscoreLink = [];
var fscoreGce = [];

var data = {
	precision: {
		rsm: precisionArray,
		copra: precisionCopra,
		cis: precisionCis,
		cfinder: precisionCfinder,
		link: precisionLink,
		gce: precisionGce
	},
	recall: {
		rsm: recallArray,
		copra: recallCopra,
		cis: recallCis,
		cfinder: recallCfinder,
		link: recallLink,
		gce: recallGce
	},
	fscore: {
		rsm: fscoreArray,
		copra: fscoreCopra,
		cis: fscoreCis,
		cfinder: fscoreCfinder,
		link: fscoreLink,
		gce: fscoreGce
	}
};

var plot = function(data, graph) {

	var name = null;

	switch (graph){
		case '#precision':
			data = data.precision;
			name = 'Precision';
			break;

		case '#recall':
			data = data.recall;
			name = 'Recall';
			break;

		case '#fscore':
			data = data.fscore;
			name = 'F-score';
			break
		
	}


	$('body').find(graph).highcharts({
            chart: {
                zoomType: 'x'
            },
            title: {
                text: name+' vs. Om'
            },
            xAxis: {
            	minTickInterval: 1,
                type: 'linear',
                title: {
                    text: 'Om',
                    legend: false
                }
            },
            yAxis: [{
                title: {
                    text: name,
                    legend: false
                },
                minTickInterval: 0.1,
                max: 1,
                min: 0,
                minRange: 1,
                lineWidth: 1
            },
            {
            	title: {
                    text: '',
                },
                opposite: true,
                
                lineWidth: 1
            }],
            legend: {
                enabled: false
            },
            credits: {
                enabled: false
            },
            tooltip: {
                valueSuffix: '',
                crosshairs: true,
                shared: true,
                useHTML: true,
                enabled: true
            },
            series: [{
                type: "line",
                name: name,
                color: "#FF0000",
                pointInterval: 1,
                pointStart: 2,
                data: data.rsm
            },
            {
                type: "line",
                name: name,
                color: "green",
                pointInterval: 1,
                pointStart: 2,
                data: data.copra
            },
            {
                type: "line",
                name: name,
                color: "blue",
                pointInterval: 1,
                pointStart: 2,
                data: data.cis
            },
            {
                type: "line",
                name: name,
                color: "black",
                pointInterval: 1,
                pointStart: 2,
                data: data.cfinder
            },
            {
                type: "line",
                name: name,
                color: "orange",
                pointInterval: 1,
                pointStart: 2,
                data: data.link
            },
            {
                type: "line",
                name: name,
                color: "pink",
                pointInterval: 1,
                pointStart: 2,
                data: data.gce
            }]
        });
}

plot(data, '#precision');
plot(data, '#recall');
plot(data, '#fscore');
